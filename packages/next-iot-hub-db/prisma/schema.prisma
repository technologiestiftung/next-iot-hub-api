// TODO: No camel case.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: singular models?
model authtokens {
  id        Int      @id @default(autoincrement())
  token     String   @db.Char(100)
  projects  projects @relation(fields: [projectId], references: [id])
  projectId Int
}

model categories {
  id          Int           @id @default(autoincrement())
  name        categoryNames
  description String        @db.Char(200)
  projects    projects[]
}

model devices {
  id         Int       @id @default(autoincrement())
  externalid String    @db.Char(20)
  name       String?   @db.Char(20)
  projects   projects  @relation(fields: [projectId], references: [id])
  projectId  Int
  records    records[]
}

model projects {
  id          Int             @id @default(autoincrement())
  name        String          @db.Char(50)
  description String?         @db.Char(200)
  createdAt   DateTime        @default(now()) @db.Date
  connectype  connectionTypes @default(ttn)
  location    String?         @db.Char(20)
  users       users           @relation(fields: [userId], references: [id])
  userId      Int
  category    categories      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  devices     devices[]
  authtoken   authtokens?
}

model records {
  id           Int      @id @default(autoincrement())
  recordedAt   DateTime @db.Date
  measurements Float[] // TODO: this should be an array of numbers is that the right syntax?
  longitude    Float?   @db.Real
  latitude     Float?   @db.Real
  altitude     Float?   @db.Real
  devices      devices  @relation(fields: [deviceId], references: [id])
  deviceId     Int
}

model users {
  id        Int        @id @default(autoincrement())
  name      String?    @unique @db.Char(20)
  email     String     @unique @db.Char(50)
  createdAt DateTime   @default(now()) @db.Date
  role      String?    @default("maker") @db.Char(50)
  projects  projects[]
}

enum categoryNames {
  Temperatur
  CO2
  Luftfeuchtigkeit
  Druck
  PAXCounter
  Lautst_rke        @map("Lautst√§rke")
}

enum connectionTypes {
  ttn
  other
}
