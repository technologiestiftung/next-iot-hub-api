

@host = localhost
@port = 4000
@mount = api

@version = v3

@apihost = http://{{ host }}:{{ port }}

@baseurl = {{apihost}}/{{ mount }}/{{ version }}

@user_token = {{$dotenv %USER_TOKEN }}

@user_id = {{$dotenv %USER_ID}}

@supabase_url = {{ $dotenv %SUPABASE_URL }}

@anon_key = {{ $dotenv %SUPABASE_ANON_KEY }}

@service_role_key = {{ $dotenv %SUPABASE_SERVICE_ROLE_KEY }}

@auth_token = {{ $dotenv %AUTH_TOKEN }}
@sensor_id = 73


### Healthcheck
GET {{ baseurl }}

### auth


POST {{ baseurl }}/auth
Content-Type: application/json

{"userId":"123"}


### postgrest with anon key

GET {{supabase_url}}/rest/v1/
apikey: {{anon_key}}


### postgrest with service role key
GET {{supabase_url}}/rest/v1/
apikey: {{service_role_key}}



### Create a user in supabase
# should return a token for later use
# add it to the .env file

POST {{supabase_url }}/auth/v1/token?grant_type=password
apikey: {{anon_key}}
Content-Type: application/json

{"email": "hash@ff6347.email",
"password": "123password"}

### login as an user in supabase
# should return a token for later use
# add it to the .env file

POST {{supabase_url }}/auth/v1/signup
apikey: {{anon_key}}
Content-Type: application/json

{"email": "hash@ff6347.email",
"password": "123password"}




### Create a sensor in supabase

POST {{supabase_url}}/rest/v1/sensors
apikey: {{anon_key}}
Authorization: Bearer {{user_token}}
Content-Type: application/json
Prefer: return=representation

{ "name": "http-client",  "user_id":"{{user_id}}" , "category_id": 1}

# [
#   {
#     "id": 35,
#     "externalId": "123",
#     "name": "http-client",
#     "projectId": 47,
#     "userId": "xxxxxx"
#   }
# ]

### get a sensor in supabase

get {{supabase_url}}/rest/v1/sensors?user_id=eq.{{user_id}}
apikey: {{anon_key}}
Authorization: Bearer {{user_token}}
Content-Type: application/json
Prefer: return=representation


# [
#   {
#     "id": 35,
#     "externalId": "123",
#     "name": "http-client",
#     "projectId": 47,
#     "userId": "xxxxxx"
#   }
# ]


### GET all your tokens

GET {{baseurl}}/authtokens
Content-Type: application/json
Authorization: Bearer {{user_token}}

### GET token by nice_id

GET {{baseurl}}/authtokens?nice_id=2
Content-Type: application/json
Authorization: Bearer {{user_token}}


### Create an authToken in this API

POST {{baseurl}}/authtokens
Content-Type: application/json
Authorization: Bearer {{user_token}}

{"description": "testing http"}

# {
#   "comment": "Should do create a token",
#   "method": "POST",
#   "url": "/api/v3/authtokens",
#   "data": {
#     "token": "123"
#   }
# }

### post records using HTTP integration  in this API

POST {{ baseurl }}/sensors/{{sensor_id}}/records
Authorization: Bearer {{ auth_token }}
Content-Type: application/json

{"latitude":52.483107, "longitude":13.390679, "altitude":33,"measurements": [1,2,3]}



### Singup user flow with magic link

POST {{ baseurl }}/signup
Content-Type: application/json

{
  "name":"ff6347",
  "email": "me@email.com"
}



# [
#   {
#     "id": 35,
#     "externalId": "123",
#     "name": "http-client",
#     "projectId": 47,
#     "userId": "xxxxxx"
#   }
# ]

###  Get some sensors

GET {{ baseurl }}/sensors
Content-Type: application/json

###  Get some sensors

GET {{ baseurl }}/sensors?category_id=1&limit=1000&offset=0
Content-Type: application/json


